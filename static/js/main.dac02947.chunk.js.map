{"version":3,"sources":["config.js","components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Task","props","_props$task","task","name","done","prio","uid","react_default","a","createElement","className","id","onClick","removeData","style","backgroundColor","border","updateData","doneHandler","TaskList","taskList","toDoTask","filter","map","components_Task","key","doneTask","length","arrayUid","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","writeUserData","Firebase","database","ref","set","state","getUserData","on","snapshot","val","setState","close","TimelineLite","selectedTask","document","getElementById","fromTo","x","toConsumableArray","setTimeout","newState","data","refs","value","prioHandler","e","handleSubmit","event","preventDefault","devIndex","findIndex","Date","getTime","toString","unshift","el","initializeApp","width","height","ease","Power2","easeInOut","delay","y","prevProps","prevState","onSubmit","type","placeholder","onChange","checked","components_TaskList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dac02947.chunk.js","sourcesContent":["const config = {\r\n  apiKey: \"AIzaSyAxvMjsnd353f6pz-ko8Z9eMrA2qEGBOSk\",\r\n  authDomain: \"testowy1-abf5c.firebaseapp.com\",\r\n  databaseURL: \"https://testowy1-abf5c.firebaseio.com\",\r\n  projectId: \"testowy1-abf5c\",\r\n  storageBucket: \"testowy1-abf5c.appspot.com\",\r\n  messagingSenderId: \"748653818033\",\r\n  appId: \"1:748653818033:web:68db10bc45904063\"\r\n};\r\n\r\nexport default config;\r\n","import React from \"react\";\r\nimport \"../styles/Task.css\";\r\n\r\nconst Task = props => {\r\n  const {name, done, prio, uid} = props.task;\r\n  const task = props.task;\r\n\r\n  if (!done) {\r\n    return (\r\n      <div\r\n        className=\"Task\"\r\n        id={uid}\r\n        style={\r\n          prio\r\n            ? {\r\n                backgroundColor: \"rgba(242, 38, 19, 0.3)\",\r\n                border: \"1px solid black\"\r\n              }\r\n            : null\r\n        }>\r\n        <h1>{name}</h1>\r\n\r\n        {prio ? (\r\n          <span className=\"icon-important\">\r\n            <i className=\"fas fa-exclamation\" />\r\n          </span>\r\n        ) : null}\r\n\r\n        <span className=\"icon-close\" onClick={() => props.removeData(task)}>\r\n          <i className=\"fas fa-times-circle\" />\r\n        </span>\r\n        <span className=\"icon-edit\" onClick={() => props.updateData(task)}>\r\n          <i className=\"fas fa-edit\" />\r\n        </span>\r\n        <span className=\"icon-done\" onClick={() => props.doneHandler(uid)}>\r\n          <i className=\"fas fa-check-circle\" />\r\n        </span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"Task\" id={uid}>\r\n        <h1>{name}</h1>\r\n\r\n        <span className=\"icon-close\" onClick={() => props.removeData(task)}>\r\n          <i className=\"fas fa-times-circle\" />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const {taskList} = props;\r\n  const toDoTask = taskList\r\n    .filter(task => !task.done)\r\n    .map(task => (\r\n      <Task\r\n        key={task.uid}\r\n        task={task}\r\n        removeData={props.removeData}\r\n        updateData={props.updateData}\r\n        doneHandler={props.doneHandler}\r\n      />\r\n    ));\r\n\r\n  const doneTask = taskList\r\n    .filter(task => task.done)\r\n    .map(task => (\r\n      <Task\r\n        key={task.uid}\r\n        task={task}\r\n        removeData={props.removeData}\r\n        updateData={props.updateData}\r\n        doneHandler={props.doneHandler}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div className=\"TaskList\">\r\n      <div className=\"toDoTasks\">\r\n        {toDoTask.length > 0 ? (\r\n          <h2>Do zrobiena:{toDoTask.length}</h2>\r\n        ) : (\r\n          <h2>Brak zadań do zrobinia.</h2>\r\n        )}\r\n        {toDoTask}\r\n      </div>\r\n      <div className=\"doneTasks\">\r\n        {doneTask.length > 0 ? (\r\n          <h2>Zrobione: {doneTask.length}</h2>\r\n        ) : (\r\n          <h2>Brak zadań zrobionych</h2>\r\n        )}\r\n        {doneTask}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport \"./styles/App.css\";\nimport Firebase from \"firebase\";\nimport config from \"./config\";\nimport TaskList from \"./components/TaskList\";\nimport {TimelineLite, Power2} from \"gsap/all\";\n\nlet arrayUid = [];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      taskList: [],\n      prio: false\n    };\n  }\n\n  writeUserData = () => {\n    Firebase.database()\n      .ref(\"/\")\n      .set(this.state);\n  };\n\n  getUserData = () => {\n    let ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", snapshot => {\n      const state = snapshot.val();\n      this.setState(state);\n    });\n  };\n\n  componentDidMount() {\n    this.getUserData();\n    const bgc = new TimelineLite();\n    bgc\n      .fromTo(\".App\", 0.8, {width: 10}, {width: \"100vw\"})\n      .fromTo(\n        \".App\",\n        0.8,\n        {height: 5},\n        {height: \"100vh\", ease: Power2.easeInOut}\n      );\n    const headerTxt = new TimelineLite();\n    headerTxt.delay(2).fromTo(\".logo\", 1, {y: -200}, {y: 0});\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.writeUserData();\n      if (arrayUid.length > 0) {\n        const close = new TimelineLite();\n        const selectedTask = document.getElementById(arrayUid.toString());\n\n        close.fromTo(selectedTask, 1, {x: \"-100vw\"}, {x: 0});\n        arrayUid = [];\n      } else {\n      }\n    }\n  }\n\n  removeData = task => {\n    const close = new TimelineLite();\n    const selectedTask = document.getElementById(task.uid);\n    close.fromTo(selectedTask, 1, {x: 0}, {x: \"1000vw\"});\n\n    const taskList = [...this.state.taskList];\n    setTimeout(() => {\n      const newState = taskList.filter(data => {\n        return data.uid !== task.uid;\n      });\n      this.setState({taskList: newState});\n    }, 500);\n  };\n\n  updateData = task => {\n    if (task.prio) {\n      this.setState({prio: true});\n    } else {\n      this.setState({prio: false});\n    }\n    this.refs.uid.value = task.uid;\n\n    this.refs.name.value = task.name;\n  };\n\n  prioHandler = e => {\n    this.setState({prio: !this.state.prio});\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    let name = this.refs.name.value;\n    let prio = this.state.prio;\n    let uid = this.refs.uid.value;\n\n    if (uid && name) {\n      const {taskList} = this.state;\n      const devIndex = taskList.findIndex(data => {\n        return data.uid === uid;\n      });\n      taskList[devIndex].name = name;\n      taskList[devIndex].prio = prio;\n      this.setState({taskList});\n    } else if (name) {\n      const uid = new Date().getTime().toString();\n      const done = false;\n      const {taskList} = this.state;\n      taskList.unshift({uid, name, prio, done});\n      arrayUid = [];\n      arrayUid.unshift(uid);\n      this.setState({taskList});\n    }\n    this.setState({prio: false});\n\n    this.refs.name.value = \"\";\n    this.refs.uid.value = \"\";\n  };\n\n  doneHandler = id => {\n    const taskList = [...this.state.taskList];\n    taskList.map(el => {\n      if (el.uid === id) {\n        el.done = true;\n      }\n      this.setState({taskList});\n    });\n    arrayUid = [];\n    arrayUid.unshift(id);\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"App\">\n          <div className=\"addTask\">\n            <div className=\"logo\">\n              <h3>Aplikacja To Do</h3>\n            </div>\n            <form onSubmit={this.handleSubmit} className=\"form\">\n              <input type=\"hidden\" ref=\"index\" />\n              <input type=\"text\" ref=\"name\" placeholder=\"Dodaj zadanie\" />\n\n              <label> Priorytet </label>\n\n              <input\n                type=\"checkbox\"\n                onChange={this.prioHandler}\n                checked={this.state.prio}\n              />\n              <button type=\"submit\" className=\"addTaskButton\">\n                Dodaj\n              </button>\n              <input type=\"hidden\" ref=\"uid\" />\n            </form>\n          </div>\n\n          <TaskList\n            taskList={this.state.taskList}\n            removeData={this.removeData}\n            updateData={this.updateData}\n            doneHandler={this.doneHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}