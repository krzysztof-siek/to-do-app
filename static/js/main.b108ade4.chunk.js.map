{"version":3,"sources":["config.js","components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Task","props","_props$task","task","name","done","prio","uid","closed","react_default","a","createElement","class","className","onClick","removeData","style","backgroundColor","border","animation","animationDuration","animationTimingFunction","updateData","doneHandler","TaskList","taskList","toDoTask","filter","map","components_Task","key","doneTask","length","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","writeUserData","Firebase","database","ref","set","state","console","log","getUserData","on","snapshot","val","setState","toConsumableArray","el","newState","data","setTimeout","refs","value","prioHandler","e","handleSubmit","event","preventDefault","devIndex","findIndex","Date","getTime","toString","unshift","id","initializeApp","prevProps","prevState","onSubmit","type","placeholder","onChange","checked","components_TaskList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b108ade4.chunk.js","sourcesContent":["const config = {\r\n  apiKey: \"AIzaSyAxvMjsnd353f6pz-ko8Z9eMrA2qEGBOSk\",\r\n  authDomain: \"testowy1-abf5c.firebaseapp.com\",\r\n  databaseURL: \"https://testowy1-abf5c.firebaseio.com\",\r\n  projectId: \"testowy1-abf5c\",\r\n  storageBucket: \"testowy1-abf5c.appspot.com\",\r\n  messagingSenderId: \"748653818033\",\r\n  appId: \"1:748653818033:web:68db10bc45904063\"\r\n};\r\n\r\nexport default config;\r\n","import React from \"react\";\r\nimport \"../styles/Task.css\";\r\n\r\nconst Task = props => {\r\n  const {name, done, prio, uid, closed} = props.task;\r\n  const task = props.task;\r\n\r\n  if (!done) {\r\n    return (\r\n      <div\r\n        class=\"Task\"\r\n        style={\r\n          prio && closed\r\n            ? {\r\n                backgroundColor: \"rgba(242, 38, 19, 0.3)\",\r\n                border: \"1px solid black\",\r\n                animation: \"taskMoveOff\",\r\n                animationDuration: \"1s\",\r\n                animationTimingFunction: \"linear\"\r\n              }\r\n            : prio\r\n            ? {\r\n                backgroundColor: \"rgba(242, 38, 19, 0.3)\",\r\n                border: \"1px solid black\"\r\n              }\r\n            : closed\r\n            ? {\r\n                animation: \"taskMoveOff\",\r\n                animationDuration: \"1s\",\r\n                animationTimingFunction: \"linear\"\r\n              }\r\n            : null\r\n        }>\r\n        <h1>{name}</h1>\r\n\r\n        {prio ? (\r\n          <span className=\"icon-important\">\r\n            <i class=\"fas fa-exclamation\" />\r\n          </span>\r\n        ) : null}\r\n\r\n        <span className=\"icon-close\" onClick={() => props.removeData(task)}>\r\n          <i class=\"fas fa-times-circle\" />\r\n        </span>\r\n        <span className=\"icon-edit\" onClick={() => props.updateData(task)}>\r\n          <i class=\"fas fa-edit\" />\r\n        </span>\r\n        <span className=\"icon-done\" onClick={() => props.doneHandler(uid)}>\r\n          <i class=\"fas fa-check-circle\" />\r\n        </span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div class=\"Task\">\r\n        <h1>{name}</h1>\r\n\r\n        <span className=\"icon-close\" onClick={() => props.removeData(task)}>\r\n          <i class=\"fas fa-times-circle\" />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const {taskList} = props;\r\n  const toDoTask = taskList\r\n    .filter(task => !task.done)\r\n    .map(task => (\r\n      <Task\r\n        key={task.uid}\r\n        task={task}\r\n        removeData={props.removeData}\r\n        updateData={props.updateData}\r\n        doneHandler={props.doneHandler}\r\n      />\r\n    ));\r\n\r\n  const doneTask = taskList\r\n    .filter(task => task.done)\r\n    .map(task => (\r\n      <Task\r\n        key={task.uid}\r\n        task={task}\r\n        removeData={props.removeData}\r\n        updateData={props.updateData}\r\n        doneHandler={props.doneHandler}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <div class=\"TaskList\">\r\n      <div class=\"toDoTasks\">\r\n        {toDoTask.length > 0 ? (\r\n          <h2>Do zrobiena:{toDoTask.length}</h2>\r\n        ) : (\r\n          <h2>Brak zadań do zrobinia.</h2>\r\n        )}\r\n        {toDoTask}\r\n      </div>\r\n      <div class=\"doneTasks\">\r\n        {doneTask.length > 0 ? (\r\n          <h2>Zrobione: {doneTask.length}</h2>\r\n        ) : (\r\n          <h2>Brak zadań zrobionych</h2>\r\n        )}\r\n        {doneTask}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport \"./styles/App.css\";\nimport Firebase from \"firebase\";\nimport config from \"./config\";\nimport TaskList from \"./components/TaskList\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      taskList: [],\n      prio: false\n    };\n  }\n\n  writeUserData = () => {\n    Firebase.database()\n      .ref(\"/\")\n      .set(this.state);\n    console.log(\"DATA SAVED\");\n  };\n\n  getUserData = () => {\n    let ref = Firebase.database().ref(\"/\");\n    ref.on(\"value\", snapshot => {\n      const state = snapshot.val();\n      this.setState(state);\n    });\n    console.log(\"DATA RETRIEVED\");\n  };\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.writeUserData();\n    }\n  }\n\n  removeData = task => {\n    const taskList = [...this.state.taskList];\n    taskList.map(el => {\n      if (el.uid === task.uid) {\n        el.closed = true;\n      }\n      this.setState({taskList});\n    });\n    if (task.done) {\n      const newState = taskList.filter(data => {\n        return data.uid !== task.uid;\n      });\n      this.setState({taskList: newState});\n    }\n    setTimeout(() => {\n      const newState = taskList.filter(data => {\n        return data.uid !== task.uid;\n      });\n      this.setState({taskList: newState});\n    }, 1000);\n  };\n\n  updateData = task => {\n    if (task.prio) {\n      this.setState({prio: true});\n    } else {\n      this.setState({prio: false});\n    }\n    this.refs.uid.value = task.uid;\n    // task.prio = task.prio;\n\n    this.refs.name.value = task.name;\n  };\n\n  prioHandler = e => {\n    this.setState({prio: !this.state.prio});\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    let name = this.refs.name.value;\n    let prio = this.state.prio;\n    let uid = this.refs.uid.value;\n\n    if (uid && name) {\n      const {taskList} = this.state;\n      const devIndex = taskList.findIndex(data => {\n        return data.uid === uid;\n      });\n      taskList[devIndex].name = name;\n      taskList[devIndex].prio = prio;\n      this.setState({taskList});\n    } else if (name) {\n      const uid = new Date().getTime().toString();\n      const done = false;\n      const closed = false;\n      const {taskList} = this.state;\n      taskList.unshift({uid, name, prio, done, closed});\n      this.setState({taskList});\n      console.log(\"poszło\");\n    }\n    this.setState({prio: false});\n\n    this.refs.name.value = \"\";\n\n    this.refs.uid.value = \"\";\n  };\n\n  doneHandler = id => {\n    const taskList = [...this.state.taskList];\n    taskList.map(el => {\n      if (el.uid === id) {\n        el.done = true;\n      }\n      this.setState({taskList});\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"addTask\">\n          <div class=\"logo\">\n            <h3>Aplikacja To Do</h3>\n          </div>\n          <form onSubmit={this.handleSubmit} className=\"form\">\n            <input type=\"hidden\" ref=\"index\" />\n            <input type=\"text\" ref=\"name\" placeholder=\"Dodaj zadanie\" />\n\n            <label> Priorytet </label>\n\n            <input\n              type=\"checkbox\"\n              onChange={this.prioHandler}\n              checked={this.state.prio}\n            />\n            <button type=\"submit\" className=\"addTaskButton\">\n              Dodaj\n            </button>\n            <input type=\"hidden\" ref=\"uid\" />\n          </form>\n        </div>\n\n        <TaskList\n          taskList={this.state.taskList}\n          removeData={this.removeData}\n          updateData={this.updateData}\n          doneHandler={this.doneHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}